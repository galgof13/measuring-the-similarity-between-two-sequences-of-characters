def build_scoring_matrix(alphabet, diag_score, off_diag_score, dash_score):
    '''
    строит скоринговую матрицу, по предоставленному алфавиту, как словарь словарей
    '''
    scoring_matrix = {}
    alphabet = list(alphabet)
    alphabet.append('-')
    for letter1 in alphabet:

        alpha = {}
        for letter2 in alphabet:
            if letter2 == letter1 and letter2 != '-':
                alpha[letter2] = diag_score
            if letter2 != '-' and letter1 != '-' and letter2 != letter1:
                alpha[letter2] = off_diag_score
            if letter2 == '-' or letter1 == '-':
                alpha[letter2] = dash_score

            scoring_matrix[letter1] = alpha

    return scoring_matrix


def compute_alignment_matrix(seq_x, seq_y, scoring_matrix, global_flag):
    '''
    вычисляет матрицу выравнивания, используя метод ComputeGlobalAlignmentScores,
    вычисляет либо глобальную матрицу выравнивания,
    либо локальную матрицу выравнивания в зависимости от значения global_flag.
    '''
    matrix = [[0 for _ in range(len(seq_y) + 1)] for _ in range(len(seq_x) + 1)]
    if global_flag:
        for ind_y in range(1, len(seq_y) + 1):
            matrix[0][ind_y] = matrix[0][ind_y - 1] + scoring_matrix['-'][seq_y[ind_y - 1]]
        for ind_x in range(1, len(seq_x) + 1):
            matrix[ind_x][0] = matrix[ind_x - 1][0] + scoring_matrix[seq_x[ind_x - 1]]['-']

        for ind_x in range(1, len(seq_x) + 1):
            for ind_y in range(1, len(seq_y) + 1):
                matrix[ind_x][ind_y] = max(
                    matrix[ind_x - 1][ind_y - 1] + scoring_matrix[seq_x[ind_x - 1]][seq_y[ind_y - 1]],
                    matrix[ind_x - 1][ind_y] + scoring_matrix[seq_x[ind_x - 1]]['-'],
                    matrix[ind_x][ind_y - 1] + scoring_matrix['-'][seq_y[ind_y - 1]])
    else:
        for ind_x in range(1, len(seq_x) + 1):
            for ind_y in range(1, len(seq_y) + 1):
                matrix[ind_x][ind_y] = max(
                    matrix[ind_x - 1][ind_y - 1] + scoring_matrix[seq_x[ind_x - 1]][seq_y[ind_y - 1]],
                    matrix[ind_x - 1][ind_y] + scoring_matrix[seq_x[ind_x - 1]]['-'],
                    matrix[ind_x][ind_y - 1] + scoring_matrix['-'][seq_y[ind_y - 1]])
                if matrix[ind_x][ind_y] < 0:
                    matrix[ind_x][ind_y] = 0
    return matrix


def compute_global_alignment(seq_x, seq_y, scoring_matrix, alignment_matrix):
    '''
    использует матрицу выравнивания, возвращаемую compute_alignment_matrix
    для вычисления глобального выравнивания двух последовательностей seq_x и seq_y,
    реализует метод ComputeAlignment
    '''
    ind_x = len(seq_x)
    ind_y = len(seq_y)
    x_alig = ''
    y_alig = ''
    score = alignment_matrix[ind_x][ind_y]
    while ind_x != 0 and ind_y != 0:
        if alignment_matrix[ind_x][ind_y] == alignment_matrix[ind_x - 1][ind_y - 1] + scoring_matrix[seq_x[ind_x - 1]][
            seq_y[ind_y - 1]]:
            x_alig = seq_x[ind_x - 1] + x_alig
            y_alig = seq_y[ind_y - 1] + y_alig
            ind_x -= 1
            ind_y -= 1
        else:
            if alignment_matrix[ind_x][ind_y] == alignment_matrix[ind_x - 1][ind_y] + scoring_matrix[seq_x[ind_x - 1]][
                '-']:
                x_alig = seq_x[ind_x - 1] + x_alig
                y_alig = '-' + y_alig
                ind_x -= 1
            else:
                x_alig = '-' + x_alig
                y_alig = seq_y[ind_y - 1] + y_alig
                ind_y -= 1
    while ind_x != 0:
        x_alig = seq_x[ind_x - 1] + x_alig
        y_alig = '-' + y_alig
        ind_x -= 1
    while ind_y != 0:
        x_alig = '-' + x_alig
        y_alig = seq_y[ind_y - 1] + y_alig
        ind_y -= 1
    return (score, x_alig, y_alig)


def compute_local_alignment(seq_x, seq_y, scoring_matrix, alignment_matrix):
    '''
    вычисляет оптимальное локальное выравнивание, начиная с максимального входа в матрицу локального выравнивания
    и работая в обратном направлении до нуля
    '''
    max_alig = float('-inf')
    for ind_alig in range(len(alignment_matrix)):
        maxi = max(alignment_matrix[ind_alig])
        if maxi > max_alig:
            max_alig = maxi

            ind_x = ind_alig
            ind_y = alignment_matrix[ind_x].index(maxi)

    x_alig = ''
    y_alig = ''
    score = alignment_matrix[ind_x][ind_y]
    while ind_x != 0 and ind_y != 0:
        if alignment_matrix[ind_x][ind_y] == 0:
            break
        if alignment_matrix[ind_x][ind_y] == alignment_matrix[ind_x - 1][ind_y - 1] + scoring_matrix[seq_x[ind_x - 1]][
            seq_y[ind_y - 1]]:
            x_alig = seq_x[ind_x - 1] + x_alig
            y_alig = seq_y[ind_y - 1] + y_alig
            ind_x -= 1
            ind_y -= 1
        else:
            if alignment_matrix[ind_x][ind_y] == alignment_matrix[ind_x - 1][ind_y] + scoring_matrix[seq_x[ind_x - 1]][
                '-']:
                x_alig = seq_x[ind_x - 1] + x_alig
                y_alig = '-' + y_alig
                ind_x -= 1
            else:
                x_alig = '-' + x_alig
                y_alig = seq_y[ind_y - 1] + y_alig
                ind_y -= 1

    return (score, x_alig, y_alig)
